h2. Mogade For .NET

Mogade is a free service web-based service which allows game developers to quickly enchance their games with auxiliary functionality (such as leaderboards).

This is the official .NET library - which is meant not only to be used within games, but also to serve as the basis for platform specific implementations. Developers interested in building a library for their own language will hopefully find this library to be decent documentation of the mogade API.

h3. Other Libraries

For a list of other libraries, please visit "http://mogade.com/manage/libraries":http://mogade.com/manage/libraries

h3. Support

The "http://groups.google.com/group/mogadedev":http://groups.google.com/group/mogadedev google group is the best place for developers, either of games or libraries, to visit.

h3. Usage

The library should be straightforward to most .NET developers. The main entry point is the @Mogade@ class (which implements @IMogade@ for you DI junkies).

You instantiate @Mogade@ by supplying your game key and game secret (available from the details view of your game on the mogade.com website):
<pre>var driver = new Driver("myGameKey", "shhhMySecret");</pre>

(we call it the Driver, because its assumed this library will be wrapped in a higher level platform library, such as the "https://github.com/mogade/mogade-windwosphone":WindowsPhone one)

Once created, you can use the various methods to interact with the mogade service. Note that all methods fire asynchronously, and thus return void and require a callback method:
<pre>driver.GetLeaderboard("leaderboardId", LeaderboardScope.Daily, page, leaderboard => { //do something with the leaderboard});</pre>

h3. API Overview

Mogade is based around a _RESTish_ API, accepting and returning JSON messages.

A full API overview can be read here "http://mogade.com/manage/api":http://mogade.com/manage/api